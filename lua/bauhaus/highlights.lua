local C = require("bauhaus.palette")

local M = {}

local function hi(g, v)
  vim.api.nvim_set_hl(0, g, v)
end

local function hi_link(g, target)
  vim.api.nvim_set_hl(0, g, { link = target, default = false })
end

function M.apply(opts)
  opts = opts or {}
  local transparent = opts.transparent
  local editor_bg = transparent and "NONE" or C.bg
  local surface0 = C.s0
  local surface1 = C.s1
  local surface2 = C.s2
  local float_bg = transparent and editor_bg or surface0

  -- Core UI
  hi("Normal", { fg = C.fg, bg = editor_bg })
  hi("NormalNC", { fg = C.sub1, bg = editor_bg })
  hi("NormalFloat", { fg = C.fg, bg = float_bg })
  hi("FloatBorder", { fg = C.s1, bg = float_bg })
  hi("WinSeparator", { fg = C.s1 })
  hi("SignColumn", { fg = C.sub0, bg = editor_bg })
  hi("ColorColumn", { bg = C.s0 })
  hi("CursorLine", { bg = surface2 })
  hi("CursorColumn", { bg = surface2 })
  hi("CursorLineNr", { fg = C.violet, bold = true })
  hi("LineNr", { fg = surface1 })
  hi("LineNrAbove", { fg = surface1 })
  hi("LineNrBelow", { fg = surface1 })
  hi("Visual", { bg = surface2 })
  hi("Search", { fg = C.bg, bg = C.blue, bold = true })
  hi("IncSearch", { fg = C.bg, bg = C.yellow, bold = true })
  hi("MatchParen", { fg = C.violet, bold = true })
  hi("Pmenu", { fg = C.fg, bg = float_bg })
  hi("PmenuSel", { fg = C.fg, bg = surface2, bold = true })
  hi("PmenuThumb", { bg = surface1 })
  hi("PmenuSbar", { bg = surface0 })
  hi("StatusLine", { fg = C.fg, bg = surface0 })
  hi("StatusLineNC", { fg = C.sub0, bg = editor_bg })
  hi("TabLine", { fg = C.sub0, bg = editor_bg })
  hi("TabLineSel", { fg = C.violet, bg = surface0, bold = true })
  hi("TabLineFill", { bg = editor_bg })
  hi("VertSplit", { fg = C.s1 })
  hi("Folded", { fg = C.sub0, bg = surface0 })
  hi("FoldColumn", { fg = C.sub0, bg = editor_bg })

  -- Diagnostics
  hi("DiagnosticError", { fg = C.red })
  hi("DiagnosticWarn", { fg = C.yellow })
  hi("DiagnosticInfo", { fg = C.blue })
  hi("DiagnosticHint", { fg = C.cyan })
  hi("DiagnosticUnderlineError", { undercurl = true, sp = C.red })
  hi("DiagnosticUnderlineWarn", { undercurl = true, sp = C.yellow })
  hi("DiagnosticUnderlineInfo", { undercurl = true, sp = C.blue })
  hi("DiagnosticUnderlineHint", { undercurl = true, sp = C.cyan })
  hi("DiagnosticVirtualTextError", { fg = C.red })
  hi("DiagnosticVirtualTextWarn", { fg = C.yellow })
  hi("DiagnosticVirtualTextInfo", { fg = C.blue })
  hi("DiagnosticVirtualTextHint", { fg = C.cyan })
  hi("DiagnosticSignError", { fg = C.red, bg = editor_bg })
  hi("DiagnosticSignWarn", { fg = C.yellow, bg = editor_bg })
  hi("DiagnosticSignInfo", { fg = C.blue, bg = editor_bg })
  hi("DiagnosticSignHint", { fg = C.cyan, bg = editor_bg })
  hi("DiagnosticSignOk", { fg = C.green, bg = editor_bg })
  hi("DiagnosticUnnecessary", { fg = C.sub0, italic = true })
  hi("DiagnosticDeprecated", { fg = C.sub0, strikethrough = true })

  -- Syntax / Treesitter
  hi("Comment", { fg = C.sub0, italic = true })
  hi("String", { fg = C.green })
  hi("Number", { fg = C.orange })
  hi("Boolean", { fg = C.orange })
  hi("Identifier", { fg = C.fg })
  hi("Function", { fg = C.blue })
  hi("Keyword", { fg = C.violet, bold = true })
  hi("Type", { fg = C.yellow })
  hi("Constant", { fg = C.orange })
  hi("Operator", { fg = C.sub1 })
  hi("Delimiter", { fg = C.s1 })
  hi("@punctuation.delimiter", { fg = C.sub0 })
  hi("@punctuation.bracket", { fg = C.sub0 })
  hi("@punctuation.special", { fg = C.sub0 })
  hi("@punctuation.special.markdown", { fg = C.violet })
  hi_link("@keyword", "Keyword")
  hi_link("@type", "Type")
  hi_link("@function", "Function")
  hi_link("@string", "String")
  hi_link("@number", "Number")
  hi_link("@boolean", "Boolean")
  hi("@variable", { fg = C.fg })
  hi("@variable.parameter", { fg = C.orange })
  hi("@variable.member", { fg = C.fg })
  hi("@variable.builtin", { fg = C.violet, italic = true })
  hi("@constant", { fg = C.orange })
  hi("@constant.builtin", { fg = C.yellow })
  hi("@constant.macro", { fg = C.orange })
  hi("@symbol", { fg = C.yellow })
  hi("@attribute", { fg = C.orange })
  hi("@constructor", { fg = C.yellow })
  hi("@field", { fg = C.sub1 })
  hi("@property", { fg = C.sub1 })
  hi("@namespace", { fg = C.blue })
  hi("@module", { fg = C.blue })
  hi("@label", { fg = C.blue })
  hi("@type.builtin", { fg = C.yellow })
  hi("@type.qualifier", { fg = C.violet })
  hi("@function.builtin", { fg = C.blue })
  hi("@function.macro", { fg = C.orange })
  hi("@function.call", { fg = C.blue })
  hi("@function.method", { fg = C.blue })
  hi("@keyword.function", { fg = C.violet, bold = true })
  hi("@keyword.operator", { fg = C.sub1 })
  hi("@keyword.return", { fg = C.violet, bold = true })
  hi("@keyword.conditional", { fg = C.violet, bold = true })
  hi("@keyword.repeat", { fg = C.violet, bold = true })
  hi("@keyword.import", { fg = C.violet, bold = true })
  hi("@keyword.directive", { fg = C.violet })
  hi("@keyword.exception", { fg = C.violet, bold = true })
  hi("@boolean", { fg = C.orange })
  hi("@number", { fg = C.orange })
  hi("@float", { fg = C.orange })
  hi("@string.escape", { fg = C.cyan })
  hi("@string.special", { fg = C.cyan })
  hi("@string.regex", { fg = C.green })
  hi("@string.documentation", { fg = C.green, italic = true })
  hi("@comment.todo", { fg = C.yellow, bold = true })
  hi("@comment.note", { fg = C.blue, bold = true })
  hi("@comment.warning", { fg = C.yellow, bold = true })
  hi("@comment.error", { fg = C.red, bold = true })

  -- Markdown / Markup
  hi("@markup.heading", { fg = C.orange, bold = true })
  hi("@markup.heading.1", { fg = C.violet, bold = true })
  hi("@markup.heading.2", { fg = C.orange, bold = true })
  hi("@markup.heading.3", { fg = C.yellow, bold = true })
  hi("@markup.heading.4", { fg = C.green, bold = true })
  hi("@markup.heading.5", { fg = C.blue, bold = true })
  hi("@markup.heading.6", { fg = C.cyan, bold = true })
  hi("@markup.list", { fg = C.violet })
  hi("@markup.quote", { fg = C.green, italic = true })
  hi("@markup.link", { fg = C.blue, underline = true })
  hi("@markup.link.label", { fg = C.violet })
  hi("@markup.link.url", { fg = C.blue, underline = true })
  hi("@markup.underline", { underline = true })
  hi("@markup.italic", { italic = true })
  hi("@markup.bold", { bold = true })
  hi("@markup.strikethrough", { fg = C.sub0, strikethrough = true })
  hi("@markup.raw", { fg = C.green })
  hi("@markup.math", { fg = C.yellow })
  hi("@markup.link.markdown_inline", { fg = C.blue, underline = true })

  hi("markdownCode", { fg = C.green })
  hi("markdownCodeBlock", { fg = C.green })
  hi("markdownUrl", { fg = C.blue, underline = true })
  hi("markdownLinkText", { fg = C.violet, underline = true })
  hi("markdownHeadingDelimiter", { fg = C.violet })
  hi("markdownH1", { fg = C.violet, bold = true })
  hi("markdownH2", { fg = C.orange, bold = true })
  hi("markdownH3", { fg = C.yellow, bold = true })
  hi("markdownH4", { fg = C.green, bold = true })
  hi("markdownH5", { fg = C.blue, bold = true })
  hi("markdownH6", { fg = C.cyan, bold = true })

  -- Structured data (JSON, YAML, etc.)
  hi("@string.json", { fg = C.green })
  hi("@label.json", { fg = C.blue })
  hi("@field.yaml", { fg = C.blue })
  hi("@property.yaml", { fg = C.blue })
  hi("yamlBlockMappingKey", { fg = C.blue, bold = true })
  hi("yamlKeyValueDelimiter", { fg = C.sub1 })
  hi("yamlDocumentStart", { fg = C.violet })
  hi("yamlDocumentEnd", { fg = C.violet })

  -- Diff & Git signs
  hi("DiffAdd", { bg = "#12332f", fg = C.green })
  hi("DiffChange", { bg = "#1f2836", fg = C.blue })
  hi("DiffDelete", { bg = "#3a2323", fg = C.red })
  hi("DiffText", { bg = "#293449", fg = C.blue, bold = true })
  hi("GitSignsAdd", { fg = C.green })
  hi("GitSignsChange", { fg = C.blue })
  hi("GitSignsDelete", { fg = C.red })

  -- Telescope
  hi("TelescopeBorder", { fg = C.blue, bg = float_bg })
  hi("TelescopeNormal", { fg = C.fg, bg = float_bg })
  hi("TelescopeTitle", { fg = C.violet, bold = true })

  -- WhichKey
  hi("WhichKey", { fg = C.violet, bold = true })
  hi("WhichKeyGroup", { fg = C.violet })
  hi("WhichKeyDesc", { fg = C.fg })
  hi("WhichKeySeparator", { fg = C.s1 })

  -- LSP integrations
  hi("LspReferenceText", { bg = surface2 })
  hi("LspReferenceRead", { bg = surface2 })
  hi("LspReferenceWrite", { bg = surface2 })
  hi("LspSignatureActiveParameter", { fg = C.yellow, bold = true })
  hi("LspCodeLens", { fg = C.sub0, italic = true })
  hi("LspCodeLensSeparator", { fg = C.sub1 })
  hi("LspInlayHint", { fg = C.sub0, bg = float_bg, italic = true })

  hi_link("@lsp.type.class", "Type")
  hi_link("@lsp.type.enum", "Type")
  hi_link("@lsp.type.enumMember", "@constant")
  hi_link("@lsp.type.function", "Function")
  hi_link("@lsp.type.method", "@function.method")
  hi_link("@lsp.type.macro", "@function.macro")
  hi_link("@lsp.type.decorator", "@attribute")
  hi_link("@lsp.type.typeParameter", "Type")
  hi_link("@lsp.type.parameter", "@variable.parameter")
  hi_link("@lsp.type.property", "@property")
  hi_link("@lsp.type.variable", "@variable")
  hi_link("@lsp.type.keyword", "@keyword")
  hi_link("@lsp.mod.readonly", "@constant")
  hi_link("@lsp.mod.deprecated", "DiagnosticDeprecated")
end

return M
